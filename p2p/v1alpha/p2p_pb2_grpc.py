# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from p2p.v1alpha import p2p_pb2 as p2p_dot_v1alpha_dot_p2p__pb2


class P2PStub(object):
    """Seed P2P API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListBlobs = channel.unary_stream(
                '/com.seed.p2p.v1alpha.P2P/ListBlobs',
                request_serializer=p2p_dot_v1alpha_dot_p2p__pb2.ListBlobsRequest.SerializeToString,
                response_deserializer=p2p_dot_v1alpha_dot_p2p__pb2.Blob.FromString,
                )
        self.ListPeers = channel.unary_unary(
                '/com.seed.p2p.v1alpha.P2P/ListPeers',
                request_serializer=p2p_dot_v1alpha_dot_p2p__pb2.ListPeersRequest.SerializeToString,
                response_deserializer=p2p_dot_v1alpha_dot_p2p__pb2.ListPeersResponse.FromString,
                )
        self.ListSpaces = channel.unary_unary(
                '/com.seed.p2p.v1alpha.P2P/ListSpaces',
                request_serializer=p2p_dot_v1alpha_dot_p2p__pb2.ListSpacesRequest.SerializeToString,
                response_deserializer=p2p_dot_v1alpha_dot_p2p__pb2.ListSpacesResponse.FromString,
                )
        self.RequestInvoice = channel.unary_unary(
                '/com.seed.p2p.v1alpha.P2P/RequestInvoice',
                request_serializer=p2p_dot_v1alpha_dot_p2p__pb2.RequestInvoiceRequest.SerializeToString,
                response_deserializer=p2p_dot_v1alpha_dot_p2p__pb2.RequestInvoiceResponse.FromString,
                )


class P2PServicer(object):
    """Seed P2P API.
    """

    def ListBlobs(self, request, context):
        """ListBlobs returns a stream of blobs that the peer has.
        It's assumed that all peers have a way to list their blobs in a monotonic order,
        i.e. blobs that a peer receives later will have a higher index/cursor.
        This allows peers to sync more efficiently by remembering the cursor from the previous request,
        and only asking for what's new since then in the next request.
        Clients must treat the cursor as an opaque string.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPeers(self, request, context):
        """Lists other peers that are known by the peer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSpaces(self, request, context):
        """Lists spaces that this peer can provide information about.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestInvoice(self, request, context):
        """Request a peer to issue a lightning BOLT-11 invoice
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_P2PServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListBlobs': grpc.unary_stream_rpc_method_handler(
                    servicer.ListBlobs,
                    request_deserializer=p2p_dot_v1alpha_dot_p2p__pb2.ListBlobsRequest.FromString,
                    response_serializer=p2p_dot_v1alpha_dot_p2p__pb2.Blob.SerializeToString,
            ),
            'ListPeers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPeers,
                    request_deserializer=p2p_dot_v1alpha_dot_p2p__pb2.ListPeersRequest.FromString,
                    response_serializer=p2p_dot_v1alpha_dot_p2p__pb2.ListPeersResponse.SerializeToString,
            ),
            'ListSpaces': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSpaces,
                    request_deserializer=p2p_dot_v1alpha_dot_p2p__pb2.ListSpacesRequest.FromString,
                    response_serializer=p2p_dot_v1alpha_dot_p2p__pb2.ListSpacesResponse.SerializeToString,
            ),
            'RequestInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestInvoice,
                    request_deserializer=p2p_dot_v1alpha_dot_p2p__pb2.RequestInvoiceRequest.FromString,
                    response_serializer=p2p_dot_v1alpha_dot_p2p__pb2.RequestInvoiceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.seed.p2p.v1alpha.P2P', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class P2P(object):
    """Seed P2P API.
    """

    @staticmethod
    def ListBlobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.seed.p2p.v1alpha.P2P/ListBlobs',
            p2p_dot_v1alpha_dot_p2p__pb2.ListBlobsRequest.SerializeToString,
            p2p_dot_v1alpha_dot_p2p__pb2.Blob.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.p2p.v1alpha.P2P/ListPeers',
            p2p_dot_v1alpha_dot_p2p__pb2.ListPeersRequest.SerializeToString,
            p2p_dot_v1alpha_dot_p2p__pb2.ListPeersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSpaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.p2p.v1alpha.P2P/ListSpaces',
            p2p_dot_v1alpha_dot_p2p__pb2.ListSpacesRequest.SerializeToString,
            p2p_dot_v1alpha_dot_p2p__pb2.ListSpacesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.p2p.v1alpha.P2P/RequestInvoice',
            p2p_dot_v1alpha_dot_p2p__pb2.RequestInvoiceRequest.SerializeToString,
            p2p_dot_v1alpha_dot_p2p__pb2.RequestInvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
