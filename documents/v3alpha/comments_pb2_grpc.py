# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from documents.v3alpha import comments_pb2 as documents_dot_v3alpha_dot_comments__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in documents/v3alpha/comments_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CommentsStub(object):
    """Comments service allows users to add comments to documents.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateComment = channel.unary_unary(
                '/com.seed.documents.v3alpha.Comments/CreateComment',
                request_serializer=documents_dot_v3alpha_dot_comments__pb2.CreateCommentRequest.SerializeToString,
                response_deserializer=documents_dot_v3alpha_dot_comments__pb2.Comment.FromString,
                _registered_method=True)
        self.GetComment = channel.unary_unary(
                '/com.seed.documents.v3alpha.Comments/GetComment',
                request_serializer=documents_dot_v3alpha_dot_comments__pb2.GetCommentRequest.SerializeToString,
                response_deserializer=documents_dot_v3alpha_dot_comments__pb2.Comment.FromString,
                _registered_method=True)
        self.BatchGetComments = channel.unary_unary(
                '/com.seed.documents.v3alpha.Comments/BatchGetComments',
                request_serializer=documents_dot_v3alpha_dot_comments__pb2.BatchGetCommentsRequest.SerializeToString,
                response_deserializer=documents_dot_v3alpha_dot_comments__pb2.BatchGetCommentsResponse.FromString,
                _registered_method=True)
        self.ListComments = channel.unary_unary(
                '/com.seed.documents.v3alpha.Comments/ListComments',
                request_serializer=documents_dot_v3alpha_dot_comments__pb2.ListCommentsRequest.SerializeToString,
                response_deserializer=documents_dot_v3alpha_dot_comments__pb2.ListCommentsResponse.FromString,
                _registered_method=True)
        self.ListCommentsByAuthor = channel.unary_unary(
                '/com.seed.documents.v3alpha.Comments/ListCommentsByAuthor',
                request_serializer=documents_dot_v3alpha_dot_comments__pb2.ListCommentsByAuthorRequest.SerializeToString,
                response_deserializer=documents_dot_v3alpha_dot_comments__pb2.ListCommentsResponse.FromString,
                _registered_method=True)
        self.UpdateComment = channel.unary_unary(
                '/com.seed.documents.v3alpha.Comments/UpdateComment',
                request_serializer=documents_dot_v3alpha_dot_comments__pb2.UpdateCommentRequest.SerializeToString,
                response_deserializer=documents_dot_v3alpha_dot_comments__pb2.Comment.FromString,
                _registered_method=True)
        self.DeleteComment = channel.unary_unary(
                '/com.seed.documents.v3alpha.Comments/DeleteComment',
                request_serializer=documents_dot_v3alpha_dot_comments__pb2.DeleteCommentRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class CommentsServicer(object):
    """Comments service allows users to add comments to documents.
    """

    def CreateComment(self, request, context):
        """Creates a new comment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetComment(self, request, context):
        """Gets a single comment by ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetComments(self, request, context):
        """Get multiple comments by ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListComments(self, request, context):
        """Lists comments for a given target.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCommentsByAuthor(self, request, context):
        """Lists comments by author.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateComment(self, request, context):
        """Updates an existing comment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteComment(self, request, context):
        """Deletes a comment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommentsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=documents_dot_v3alpha_dot_comments__pb2.CreateCommentRequest.FromString,
                    response_serializer=documents_dot_v3alpha_dot_comments__pb2.Comment.SerializeToString,
            ),
            'GetComment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetComment,
                    request_deserializer=documents_dot_v3alpha_dot_comments__pb2.GetCommentRequest.FromString,
                    response_serializer=documents_dot_v3alpha_dot_comments__pb2.Comment.SerializeToString,
            ),
            'BatchGetComments': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetComments,
                    request_deserializer=documents_dot_v3alpha_dot_comments__pb2.BatchGetCommentsRequest.FromString,
                    response_serializer=documents_dot_v3alpha_dot_comments__pb2.BatchGetCommentsResponse.SerializeToString,
            ),
            'ListComments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListComments,
                    request_deserializer=documents_dot_v3alpha_dot_comments__pb2.ListCommentsRequest.FromString,
                    response_serializer=documents_dot_v3alpha_dot_comments__pb2.ListCommentsResponse.SerializeToString,
            ),
            'ListCommentsByAuthor': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCommentsByAuthor,
                    request_deserializer=documents_dot_v3alpha_dot_comments__pb2.ListCommentsByAuthorRequest.FromString,
                    response_serializer=documents_dot_v3alpha_dot_comments__pb2.ListCommentsResponse.SerializeToString,
            ),
            'UpdateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateComment,
                    request_deserializer=documents_dot_v3alpha_dot_comments__pb2.UpdateCommentRequest.FromString,
                    response_serializer=documents_dot_v3alpha_dot_comments__pb2.Comment.SerializeToString,
            ),
            'DeleteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteComment,
                    request_deserializer=documents_dot_v3alpha_dot_comments__pb2.DeleteCommentRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.seed.documents.v3alpha.Comments', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('com.seed.documents.v3alpha.Comments', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Comments(object):
    """Comments service allows users to add comments to documents.
    """

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.seed.documents.v3alpha.Comments/CreateComment',
            documents_dot_v3alpha_dot_comments__pb2.CreateCommentRequest.SerializeToString,
            documents_dot_v3alpha_dot_comments__pb2.Comment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.seed.documents.v3alpha.Comments/GetComment',
            documents_dot_v3alpha_dot_comments__pb2.GetCommentRequest.SerializeToString,
            documents_dot_v3alpha_dot_comments__pb2.Comment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGetComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.seed.documents.v3alpha.Comments/BatchGetComments',
            documents_dot_v3alpha_dot_comments__pb2.BatchGetCommentsRequest.SerializeToString,
            documents_dot_v3alpha_dot_comments__pb2.BatchGetCommentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.seed.documents.v3alpha.Comments/ListComments',
            documents_dot_v3alpha_dot_comments__pb2.ListCommentsRequest.SerializeToString,
            documents_dot_v3alpha_dot_comments__pb2.ListCommentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCommentsByAuthor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.seed.documents.v3alpha.Comments/ListCommentsByAuthor',
            documents_dot_v3alpha_dot_comments__pb2.ListCommentsByAuthorRequest.SerializeToString,
            documents_dot_v3alpha_dot_comments__pb2.ListCommentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.seed.documents.v3alpha.Comments/UpdateComment',
            documents_dot_v3alpha_dot_comments__pb2.UpdateCommentRequest.SerializeToString,
            documents_dot_v3alpha_dot_comments__pb2.Comment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.seed.documents.v3alpha.Comments/DeleteComment',
            documents_dot_v3alpha_dot_comments__pb2.DeleteCommentRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
