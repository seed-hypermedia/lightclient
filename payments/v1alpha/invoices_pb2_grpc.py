# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from payments.v1alpha import invoices_pb2 as payments_dot_v1alpha_dot_invoices__pb2


class InvoicesStub(object):
    """Invoices service deals with invoices and payments of invoices.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateInvoice = channel.unary_unary(
                '/com.seed.payments.v1alpha.Invoices/CreateInvoice',
                request_serializer=payments_dot_v1alpha_dot_invoices__pb2.CreateInvoiceRequest.SerializeToString,
                response_deserializer=payments_dot_v1alpha_dot_invoices__pb2.InvoiceResponse.FromString,
                )
        self.PayInvoice = channel.unary_unary(
                '/com.seed.payments.v1alpha.Invoices/PayInvoice',
                request_serializer=payments_dot_v1alpha_dot_invoices__pb2.PayInvoiceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListPaidInvoices = channel.unary_unary(
                '/com.seed.payments.v1alpha.Invoices/ListPaidInvoices',
                request_serializer=payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesRequest.SerializeToString,
                response_deserializer=payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesResponse.FromString,
                )
        self.DecodeInvoice = channel.unary_unary(
                '/com.seed.payments.v1alpha.Invoices/DecodeInvoice',
                request_serializer=payments_dot_v1alpha_dot_invoices__pb2.DecodeInvoiceRequest.SerializeToString,
                response_deserializer=payments_dot_v1alpha_dot_invoices__pb2.Invoice.FromString,
                )
        self.ListReceivedInvoices = channel.unary_unary(
                '/com.seed.payments.v1alpha.Invoices/ListReceivedInvoices',
                request_serializer=payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesRequest.SerializeToString,
                response_deserializer=payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesResponse.FromString,
                )


class InvoicesServicer(object):
    """Invoices service deals with invoices and payments of invoices.
    """

    def CreateInvoice(self, request, context):
        """CreateInvoice creates a local invoice. Used to get paid. Typicaly 
        seed users will call this remotely bc they don't know the lnaddress
        of the receiver, just their seed account. The local node, upon the 
        request, issues an invoice.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PayInvoice(self, request, context):
        """PayInvoice Pays a bolt11 invoice.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPaidInvoices(self, request, context):
        """ListPaidInvoices Pays a bolt11 invoice.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecodeInvoice(self, request, context):
        """DecodeInvoice decodes an invoice .
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListReceivedInvoices(self, request, context):
        """ListReceivedInvoices Lists received payments.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InvoicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateInvoice,
                    request_deserializer=payments_dot_v1alpha_dot_invoices__pb2.CreateInvoiceRequest.FromString,
                    response_serializer=payments_dot_v1alpha_dot_invoices__pb2.InvoiceResponse.SerializeToString,
            ),
            'PayInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.PayInvoice,
                    request_deserializer=payments_dot_v1alpha_dot_invoices__pb2.PayInvoiceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListPaidInvoices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPaidInvoices,
                    request_deserializer=payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesRequest.FromString,
                    response_serializer=payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesResponse.SerializeToString,
            ),
            'DecodeInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodeInvoice,
                    request_deserializer=payments_dot_v1alpha_dot_invoices__pb2.DecodeInvoiceRequest.FromString,
                    response_serializer=payments_dot_v1alpha_dot_invoices__pb2.Invoice.SerializeToString,
            ),
            'ListReceivedInvoices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListReceivedInvoices,
                    request_deserializer=payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesRequest.FromString,
                    response_serializer=payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.seed.payments.v1alpha.Invoices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Invoices(object):
    """Invoices service deals with invoices and payments of invoices.
    """

    @staticmethod
    def CreateInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.payments.v1alpha.Invoices/CreateInvoice',
            payments_dot_v1alpha_dot_invoices__pb2.CreateInvoiceRequest.SerializeToString,
            payments_dot_v1alpha_dot_invoices__pb2.InvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PayInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.payments.v1alpha.Invoices/PayInvoice',
            payments_dot_v1alpha_dot_invoices__pb2.PayInvoiceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPaidInvoices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.payments.v1alpha.Invoices/ListPaidInvoices',
            payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesRequest.SerializeToString,
            payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecodeInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.payments.v1alpha.Invoices/DecodeInvoice',
            payments_dot_v1alpha_dot_invoices__pb2.DecodeInvoiceRequest.SerializeToString,
            payments_dot_v1alpha_dot_invoices__pb2.Invoice.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListReceivedInvoices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.payments.v1alpha.Invoices/ListReceivedInvoices',
            payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesRequest.SerializeToString,
            payments_dot_v1alpha_dot_invoices__pb2.ListInvoicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LNURLStub(object):
    """LNURL service provides LNURL (https://github.com/lnurl) compatibility.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestLud6Invoice = channel.unary_unary(
                '/com.seed.payments.v1alpha.LNURL/RequestLud6Invoice',
                request_serializer=payments_dot_v1alpha_dot_invoices__pb2.RequestLud6InvoiceRequest.SerializeToString,
                response_deserializer=payments_dot_v1alpha_dot_invoices__pb2.InvoiceResponse.FromString,
                )
        self.GetLnAddress = channel.unary_unary(
                '/com.seed.payments.v1alpha.LNURL/GetLnAddress',
                request_serializer=payments_dot_v1alpha_dot_invoices__pb2.GetLnAddressRequest.SerializeToString,
                response_deserializer=payments_dot_v1alpha_dot_invoices__pb2.LNAddress.FromString,
                )
        self.UpdateLNAddress = channel.unary_unary(
                '/com.seed.payments.v1alpha.LNURL/UpdateLNAddress',
                request_serializer=payments_dot_v1alpha_dot_invoices__pb2.UpdateLNAddressRequest.SerializeToString,
                response_deserializer=payments_dot_v1alpha_dot_invoices__pb2.LNAddress.FromString,
                )


class LNURLServicer(object):
    """LNURL service provides LNURL (https://github.com/lnurl) compatibility.
    """

    def RequestLud6Invoice(self, request, context):
        """Request an invoice following the LNURL lud6 protocol 
        (https://github.com/lnurl/luds/blob/luds/06.md). This does not require the
        caller to log in anywhere. Used to pay.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLnAddress(self, request, context):
        """GetLnAddress gets the lnaddress (https://lightningaddress.com/) associated
        with a wallet. Not all wallets are lnaddress compatible.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLNAddress(self, request, context):
        """UpdateLNAddress change the lnaddress of a specific wallet.
        LNaddress must be globally unique (like email addresses).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LNURLServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestLud6Invoice': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestLud6Invoice,
                    request_deserializer=payments_dot_v1alpha_dot_invoices__pb2.RequestLud6InvoiceRequest.FromString,
                    response_serializer=payments_dot_v1alpha_dot_invoices__pb2.InvoiceResponse.SerializeToString,
            ),
            'GetLnAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLnAddress,
                    request_deserializer=payments_dot_v1alpha_dot_invoices__pb2.GetLnAddressRequest.FromString,
                    response_serializer=payments_dot_v1alpha_dot_invoices__pb2.LNAddress.SerializeToString,
            ),
            'UpdateLNAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLNAddress,
                    request_deserializer=payments_dot_v1alpha_dot_invoices__pb2.UpdateLNAddressRequest.FromString,
                    response_serializer=payments_dot_v1alpha_dot_invoices__pb2.LNAddress.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.seed.payments.v1alpha.LNURL', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LNURL(object):
    """LNURL service provides LNURL (https://github.com/lnurl) compatibility.
    """

    @staticmethod
    def RequestLud6Invoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.payments.v1alpha.LNURL/RequestLud6Invoice',
            payments_dot_v1alpha_dot_invoices__pb2.RequestLud6InvoiceRequest.SerializeToString,
            payments_dot_v1alpha_dot_invoices__pb2.InvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLnAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.payments.v1alpha.LNURL/GetLnAddress',
            payments_dot_v1alpha_dot_invoices__pb2.GetLnAddressRequest.SerializeToString,
            payments_dot_v1alpha_dot_invoices__pb2.LNAddress.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateLNAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.payments.v1alpha.LNURL/UpdateLNAddress',
            payments_dot_v1alpha_dot_invoices__pb2.UpdateLNAddressRequest.SerializeToString,
            payments_dot_v1alpha_dot_invoices__pb2.LNAddress.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
