# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from networking.v1alpha import networking_pb2 as networking_dot_v1alpha_dot_networking__pb2


class NetworkingStub(object):
    """Networking API service of the Seed daemon.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPeerInfo = channel.unary_unary(
                '/com.seed.networking.v1alpha.Networking/GetPeerInfo',
                request_serializer=networking_dot_v1alpha_dot_networking__pb2.GetPeerInfoRequest.SerializeToString,
                response_deserializer=networking_dot_v1alpha_dot_networking__pb2.PeerInfo.FromString,
                )
        self.ListPeers = channel.unary_unary(
                '/com.seed.networking.v1alpha.Networking/ListPeers',
                request_serializer=networking_dot_v1alpha_dot_networking__pb2.ListPeersRequest.SerializeToString,
                response_deserializer=networking_dot_v1alpha_dot_networking__pb2.ListPeersResponse.FromString,
                )
        self.Connect = channel.unary_unary(
                '/com.seed.networking.v1alpha.Networking/Connect',
                request_serializer=networking_dot_v1alpha_dot_networking__pb2.ConnectRequest.SerializeToString,
                response_deserializer=networking_dot_v1alpha_dot_networking__pb2.ConnectResponse.FromString,
                )


class NetworkingServicer(object):
    """Networking API service of the Seed daemon.
    """

    def GetPeerInfo(self, request, context):
        """Lookup details about a known peer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPeers(self, request, context):
        """List peers by status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Establishes a direct connection with a given peer explicitly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetworkingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPeerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPeerInfo,
                    request_deserializer=networking_dot_v1alpha_dot_networking__pb2.GetPeerInfoRequest.FromString,
                    response_serializer=networking_dot_v1alpha_dot_networking__pb2.PeerInfo.SerializeToString,
            ),
            'ListPeers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPeers,
                    request_deserializer=networking_dot_v1alpha_dot_networking__pb2.ListPeersRequest.FromString,
                    response_serializer=networking_dot_v1alpha_dot_networking__pb2.ListPeersResponse.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=networking_dot_v1alpha_dot_networking__pb2.ConnectRequest.FromString,
                    response_serializer=networking_dot_v1alpha_dot_networking__pb2.ConnectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.seed.networking.v1alpha.Networking', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Networking(object):
    """Networking API service of the Seed daemon.
    """

    @staticmethod
    def GetPeerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.networking.v1alpha.Networking/GetPeerInfo',
            networking_dot_v1alpha_dot_networking__pb2.GetPeerInfoRequest.SerializeToString,
            networking_dot_v1alpha_dot_networking__pb2.PeerInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.networking.v1alpha.Networking/ListPeers',
            networking_dot_v1alpha_dot_networking__pb2.ListPeersRequest.SerializeToString,
            networking_dot_v1alpha_dot_networking__pb2.ListPeersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.networking.v1alpha.Networking/Connect',
            networking_dot_v1alpha_dot_networking__pb2.ConnectRequest.SerializeToString,
            networking_dot_v1alpha_dot_networking__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
