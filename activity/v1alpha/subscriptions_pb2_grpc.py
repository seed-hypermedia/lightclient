# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from activity.v1alpha import subscriptions_pb2 as activity_dot_v1alpha_dot_subscriptions__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class SubscriptionsStub(object):
    """Subscriptions service provides subscription capabilities.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_unary(
                '/com.seed.activity.v1alpha.Subscriptions/Subscribe',
                request_serializer=activity_dot_v1alpha_dot_subscriptions__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Unsubscribe = channel.unary_unary(
                '/com.seed.activity.v1alpha.Subscriptions/Unsubscribe',
                request_serializer=activity_dot_v1alpha_dot_subscriptions__pb2.UnsubscribeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListSubscriptions = channel.unary_unary(
                '/com.seed.activity.v1alpha.Subscriptions/ListSubscriptions',
                request_serializer=activity_dot_v1alpha_dot_subscriptions__pb2.ListSubscriptionsRequest.SerializeToString,
                response_deserializer=activity_dot_v1alpha_dot_subscriptions__pb2.ListSubscriptionsResponse.FromString,
                )


class SubscriptionsServicer(object):
    """Subscriptions service provides subscription capabilities.
    """

    def Subscribe(self, request, context):
        """Subscribe to a document or space.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unsubscribe(self, request, context):
        """Remove a subscription.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSubscriptions(self, request, context):
        """Lists active subscriptions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubscriptionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=activity_dot_v1alpha_dot_subscriptions__pb2.SubscribeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Unsubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Unsubscribe,
                    request_deserializer=activity_dot_v1alpha_dot_subscriptions__pb2.UnsubscribeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListSubscriptions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSubscriptions,
                    request_deserializer=activity_dot_v1alpha_dot_subscriptions__pb2.ListSubscriptionsRequest.FromString,
                    response_serializer=activity_dot_v1alpha_dot_subscriptions__pb2.ListSubscriptionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.seed.activity.v1alpha.Subscriptions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Subscriptions(object):
    """Subscriptions service provides subscription capabilities.
    """

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.activity.v1alpha.Subscriptions/Subscribe',
            activity_dot_v1alpha_dot_subscriptions__pb2.SubscribeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unsubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.activity.v1alpha.Subscriptions/Unsubscribe',
            activity_dot_v1alpha_dot_subscriptions__pb2.UnsubscribeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSubscriptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.activity.v1alpha.Subscriptions/ListSubscriptions',
            activity_dot_v1alpha_dot_subscriptions__pb2.ListSubscriptionsRequest.SerializeToString,
            activity_dot_v1alpha_dot_subscriptions__pb2.ListSubscriptionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
